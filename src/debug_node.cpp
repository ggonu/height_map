#include <ros/ros.h>
#include <visualization_msgs/Marker.h>
#include <vector>

// Function to create a point marker
visualization_msgs::Marker createPointMarker(int id, float x, float y, float z, const std_msgs::ColorRGBA& color) {
  visualization_msgs::Marker marker;
  marker.header.frame_id = "map";  // Change this if you are using a different frame
  marker.header.stamp = ros::Time::now();
  marker.ns = "point_marker_" + std::to_string(id);
  marker.id = id;
  marker.type = visualization_msgs::Marker::CUBE;  // Marker shape: SPHERE for points
  marker.action = visualization_msgs::Marker::ADD;

  marker.pose.position.x = x;
  marker.pose.position.y = y;
  marker.pose.position.z = z;
  marker.pose.orientation.x = 0.0;
  marker.pose.orientation.y = 0.0;
  marker.pose.orientation.z = 0.0;
  marker.pose.orientation.w = 0.6;

  marker.scale.x = 0.02;  // Adjust the scale as needed
  marker.scale.y = 0.02;
  marker.scale.z = 0.02;

  marker.color = color;  // Set color
  marker.color.a = 1.0;  // Fully opaque

  return marker;
}

int main(int argc, char** argv) {
  ros::init(argc, argv, "point_visualizer");
  ros::NodeHandle nh;

  // Publisher for visualization markers
  ros::Publisher marker_pub = nh.advertise<visualization_msgs::Marker>("visualization_marker", 10);

  // Define points and their colors
  std::vector<std::tuple<double, double, double>> points = {
    // One //
    // {-0.164097, -0.253067, 1.13319},
    // {-0.141464, -0.400491, 1.14726},
    // {-0.0913312, -0.411671, 1.14072},
    // {-0.105917, -0.225285, 1.12073},
    // {0.130256, -0.330633, 1.09621},
    // {0.110966, -0.24924, 1.08951},
    // {0.0909361, -0.210849, 1.08807},
    // {0.0714597, -0.190735, 1.08872},
    // {0.00905943, -0.190958, 1.09856},
    // {0.069628, -0.3713, 1.1106},

    // Two //
    // {-0.514688, 0.434497, 1.45126},
    // {-0.608458, 0.530609, 1.46861},
    // {-0.527971, 0.528422, 1.46122},
    // {-0.470083, 0.524016, 1.45564},
    // {-0.468811, 0.470495, 1.45052},
    // {-0.470829, 0.457599, 1.4495},
    // {-0.783368, 0.388489, 1.47096},
    // {-0.731209, 0.384198, 1.4659},
    // {-0.708948, 0.387076, 1.46418},
    // {-0.788561, 0.427833, 1.4751},
    // {-0.793236, 0.470215, 1.47948},
    // {-0.79308, 0.489155, 1.48123},
    // {-0.792954, 0.504307, 1.48264},
    // {-0.787748, 0.526183, 1.48421},

    // Three //
    // {-0.191656, -0.151124, 1.01537},
    // {-0.229121, -0.166518, 1.02391},
    // {-0.21007, -0.166069, 1.02031},
    // {-0.197347, 0.10761, 0.990368},
    // {-0.107672, 0.005388, 0.983919},
    // {-0.17291, 0.10457, 0.986111},
    // {-0.37743, 0.0280105, 1.03201},
    // {-0.289882, 0.108919, 1.00752},
    // {-0.348121, 0.104838, 1.0188},
    // {-0.362179, 0.0821287, 1.02371},
    // {-0.30766, -0.164895, 1.03841},
    // {-0.34321, -0.163905, 1.04495},
    // {-0.348387, -0.149774, 1.0445}

    // Four //
    // {-0.549557, 0.408689, 1.46089},
    // {-0.622893, 0.415252, 1.46618},
    // {-0.530411, 0.381381, 1.46238},
    // {-0.789753, 0.190583, 1.50516},
    // {-0.805849, 0.190745, 1.50647},
    // {-0.805718, 0.209901, 1.5043},
    // {-0.802461, 0.28984, 1.49505},

    // Five //
    // {-0.11427, -0.216518, 1.12146},
    // {-0.130936, -0.230998, 1.12581},
    // {-0.149168, -0.268221, 1.13319},
    // {-0.148796, -0.330653, 1.14076},
    // {-0.145561, -0.350628, 1.1427},
    // {-0.113082, -0.394574, 1.14302},
    // {-0.0900533, -0.408362, 1.14113},
    // {0.170141, -0.329183, 1.09104},
    // {0.167851, -0.290831, 1.08671},
    // {0.130304, -0.249345, 1.08748},
    // {0.110586, -0.230881, 1.08829},
    // {0.0288724, -0.405288, 1.12228}

    // Six //
    // {-0.832711, -0.397904, 1.608490},
    // {0.029728, -0.405795, 1.170897},
    // {-0.011062, -0.403433, 1.167969},
    // {-0.844573, -0.397397, 1.608350},
    // {0.045149, -0.387557, 1.165353},
    // {-0.082674, -0.387043, 1.158574},
    // {0.061123, -0.362420, 1.157439},
    // {-0.146532, -0.361592, 1.146428},
    // {-0.729448, -0.390347, 1.606133},
    // {-0.634448, -0.382787, 1.603784},
    // {-0.609667, -0.371415, 1.600366},
    // {0.103974, -0.250235, 1.120652},
    // {-0.576628, -0.352461, 1.594676},
    // {-0.175088, -0.276702, 1.115442},
    // {0.208769, -0.203664, 1.219927},
    // {0.169423, -0.205105, 1.219882},
    // {0.332415, -0.171140, 1.212091},
    // {0.088919, -0.211578, 1.106436},
    // {0.169650, -0.188249, 1.215083},
    // {-0.170927, -0.251784, 1.106994},
    // {0.349252, -0.130076, 1.200587},
    // {0.649143, -0.048691, 1.497375},
    // {0.709553, -0.028178, 1.490270},
    // {0.749988, -0.002706, 1.482364},
    // {0.750670, 0.030730, 1.473374},
    // {0.351288, -0.071926, 1.184044},
    // {0.572870, -0.010209, 1.489069},
    // {-0.021163, -0.150566, 1.079541},
    // {-0.032328, -0.149373, 1.078549},
    // {0.350727, -0.030238, 1.172161},
    // {0.746740, 0.093910, 1.456524},
    // {0.349770, -0.009161, 1.166145},
    // {-0.126507, -0.150124, 1.073947},
    // {-0.138113, -0.153091, 1.074379},
    // {0.184419, -0.039085, 1.172758},
    // {0.342315, 0.020697, 1.157553},
    // {0.740429, 0.162393, 1.438316},
    // {0.329573, 0.024079, 1.156442},
    // {0.310410, 0.027395, 1.155276},
    // {-0.569017, -0.292533, 1.576779},
    // {0.230371, 0.030112, 1.153576},
    // {0.703598, 0.427804, 1.368074},
    // {0.683837, 0.502301, 1.348607},
    // {0.649957, 0.506041, 1.348501},
    // {-0.190499, 0.092338, 1.420153},
    // {-0.228870, 0.089884, 1.419772},
    // {-0.110007, 0.213637, 1.399226},
    // {-0.095106, 0.251887, 1.392397},
    // {-0.287652, 0.090169, 1.418432},
    // {-0.130175, 0.310156, 1.380730},
    // {-0.147595, 0.330535, 1.376536},
    // {0.008340, 0.505025, 1.365772},
    // {-0.348936, 0.127213, 1.410161},
    // {-0.340417, 0.275011, 1.382701},
    // {-0.570102, -0.030017, 1.498414},
    // {-0.271890, 0.390546, 1.362589},
    // {-0.211045, 0.493269, 1.374739},
    // {-0.330520, 0.329482, 1.372728},
    // {-0.292955, 0.390018, 1.362227},
    // {-0.308623, 0.372432, 1.365173},
    // {-0.629229, 0.028355, 1.481047},
    // {-0.644789, 0.028589, 1.480992},
    // {-0.764963, 0.003085, 1.488722},
    // {-0.784027, -0.016577, 1.494610},
    // {-0.789123, -0.031474, 1.499062},
    // {-0.800406, -0.072742, 1.511392},
    // {-0.840222, -0.299281, 1.579056},
    // {-0.841548, -0.311674, 1.582757},
    // {-0.846312, -0.383794, 1.604291},

    // Seven //
    // {-0.321418, 0.376496, 1.36347},
    // {-0.210945, 0.370826, 1.36589},
    // {-0.330465, 0.329588, 1.37285},
    // {-0.109907, 0.213695, 1.39883},
    // {-0.0910218, 0.289488, 1.38372},
    // {-0.147547, 0.330232, 1.37483},
    // {-0.348789, 0.233061, 1.39215},
    // {-0.328263, 0.073256, 1.42469},
    // {-0.30941, 0.0733693, 1.42489},

    // Eight //
    // {0.649142, -0.0486989, 1.49735},
    // {0.61067, -0.0305852, 1.49351},
    // {0.75067, 0.0307233, 1.47335},
    // {0.750786, -0.0137942, 1.48529},
    // {0.709553, -0.0281856, 1.49024},
    // {0.649957, 0.50604, 1.34849},
    // {0.683837, 0.502299, 1.3486},
    // {0.703597, 0.427801, 1.36806},

    // Nine //
    // {-0.576582, -0.352007, 1.59617},
    // {-0.571904, -0.343694, 1.59376},
    // {-0.609683, -0.371091, 1.60146},
    // {-0.750025, 0.0085597, 1.48754},
    // {-0.783976, -0.0165657, 1.49461},
    // {-0.789095, -0.0314928, 1.49898},
    // {-0.549886, 0.0280751, 1.4839},
    // {-0.548874, 0.0464484, 1.47847},
    // {-0.610262, 0.0473784, 1.47754},
    // {-0.832795, -0.398324, 1.60714},
    // {-0.844667, -0.397856, 1.60688},
    // {-0.846411, -0.384251, 1.60283},
    // {-0.841502, -0.31204, 1.5815},
    // {-0.840163, -0.299633, 1.57784},
    // {-0.729518, -0.390428, 1.60591},

    // Ten //
    {-0.0827641, -0.386815, 1.15935},
    {-0.190209, -0.347201, 1.14069},
    {-0.171003, -0.251621, 1.10757},
    {-0.148253, -0.191412, 1.08716},
    {-0.109549, -0.167571, 1.08035},
    {-0.070984, -0.148302, 1.07516},
    {-0.0380023, -0.163182, 1.08185},
    {0.0533773, -0.255106, 1.1184},
    {0.0833884, -0.302363, 1.13647},
    {0.0611312, -0.362619, 1.15691},
    {0.045177, -0.387628, 1.16511},
    {0.0297857, -0.40575, 1.17089},
    {-0.0110305, -0.403289, 1.16827},

    // Eleven //
    {-0.408352, 0.491502, 1.37111},
    {-0.488528, 0.472254, 1.37394},
    {-0.492023, 0.454221, 1.37572},
    {-0.47214, 0.391781, 1.38149},
    {-0.367209, 0.492614, 1.3705},
    {-0.387813, 0.492058, 1.37081},

    // Twelve //
    {0.649143, -0.0486939, 1.49737},
    {0.610671, -0.0305796, 1.49353},
    {0.75067, 0.0307271, 1.47336},
    {0.749519, 0.0113173, 1.4786},
    {0.729448, -0.014388, 1.48603},
    {0.709553, -0.0281815, 1.49026},
    {0.670832, -0.0478977, 1.49658},
    {0.649957, 0.506047, 1.34852},
    {0.683837, 0.502306, 1.34862},
    {0.703598, 0.427807, 1.36809},
  };

  std_msgs::ColorRGBA color;

  ros::Rate rate(2.0);

  int id = 0;  // Unique ID for each marker
  for (const auto& point : points) {
    if (!ros::ok()) break;

    float h = static_cast<float>(id) / points.size();
    color.r =  1.0f * (1.0f - h);
    color.g =  h;
    color.b =  1.0f - color.r;
    color.a = 0.8f;

    // Create a marker for the current point
    visualization_msgs::Marker marker = createPointMarker(
      id,
      std::get<0>(point),
      std::get<1>(point),
      std::get<2>(point),
      color
    );

    // Publish the marker
    marker_pub.publish(marker);
    ROS_INFO("Published marker ID: %d at (%f, %f, %f)", id, std::get<0>(point), std::get<1>(point), std::get<2>(point));

    // Increment ID for the next marker
    id++;

    // Wait for 1 second
    rate.sleep();
  }

  ROS_INFO("All points visualized. Shutting down.");
  return 0;
}